name: Run JMeter ReqRes Tests

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '15 8 * * *'  # 15:15 WIB (UTC+7)

jobs:
  jmeter-test:
    runs-on: ubuntu-latest

    steps:
    - name: üîΩ Checkout Repository
      uses: actions/checkout@v3

    - name: ‚òïÔ∏è Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: üîß Install JMeter
      run: |
        wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
        tar -xzf apache-jmeter-5.6.3.tgz
        echo "JMETER_HOME=$(pwd)/apache-jmeter-5.6.3" >> $GITHUB_ENV

    - name: ‚ñ∂Ô∏è Run JMeter Test Plan
      id: jmeter
      shell: bash
      run: |
        REPORT_DIR="logs/html-report-$(date -u +%Y%m%d-%H%M)"
        mkdir -p "$REPORT_DIR"
        set +e
        "${JMETER_HOME}/bin/jmeter" -n \
          -t tests/cdc-reqres.jmx \
          -l logs/result.jtl \
          -q configs/secret.properties
        JMETER_EXIT=$?
        set -e
        if [ "$JMETER_EXIT" -eq 0 ] && grep -q '<sampleResult' logs/result.jtl; then
          "${JMETER_HOME}/bin/jmeter" -g logs/result.jtl -o "$REPORT_DIR"
        else
          echo "‚ö†Ô∏è Skipping HTML generation: test failed or no samples"
        fi
        echo "report_dir=$REPORT_DIR" >> $GITHUB_OUTPUT

    - name: üì§ Upload JMeter Results & Report
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-report
        path: |
          logs/result.jtl
          ${{ steps.jmeter.outputs.report_dir }}/
        compression-level: 6
        if-no-files-found: warn

    - name: üßπ Cleanup Manual HTML Report (Previous Run)
      run: |
        if [ -d logs/manual-html-report ]; then
          echo "üßº Removing previous manual-html-report folder"
          rm -rf logs/manual-html-report
        fi

    - name: üõ†Ô∏è Generate Manual HTML Report (Secondary Location)
      if: success()
      run: |
        mkdir -p logs/manual-html-report
        if grep -q '<sampleResult' logs/result.jtl; then
          "${JMETER_HOME}/bin/jmeter" -g logs/result.jtl -o logs/manual-html-report
        else
          echo "‚ö†Ô∏è Skipping manual HTML report: no sample data in result.jtl"
        fi

    - name: üìä Extract JMeter Metrics
      id: metrics
      run: |
        # Ensure logs directory exists
        mkdir -p logs
        
        # Extract metrics with proper error handling
        if [ -f logs/result.jtl ]; then
          REQ_COUNT=$(grep -c '<sampleResult' logs/result.jtl 2>/dev/null || echo "0")
          ERROR_COUNT=$(grep -c 's="false"' logs/result.jtl 2>/dev/null || echo "0")
        else
          echo "‚ö†Ô∏è result.jtl not found, setting counts to 0"
          REQ_COUNT="0"
          ERROR_COUNT="0"
        fi
        
        # Debug output
        echo "Total requests found: $REQ_COUNT"
        echo "Error requests found: $ERROR_COUNT"
        
        # Set GitHub outputs with proper formatting
        {
          echo "total_requests=$REQ_COUNT"
          echo "error_requests=$ERROR_COUNT"
        } >> $GITHUB_OUTPUT

    - name: üì¢ Telegram Notification (optional)
      if: always()
      run: |
        STATUS="‚úÖ JMeter test passed"
        [ "${{ job.status }}" != "success" ] && STATUS="‚ùå JMeter test failed"

        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
        RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # Get metrics with fallback values
        TOTAL_REQUESTS="${{ steps.metrics.outputs.total_requests }}"
        ERROR_REQUESTS="${{ steps.metrics.outputs.error_requests }}"
        
        # Ensure values are not empty
        TOTAL_REQUESTS=${TOTAL_REQUESTS:-0}
        ERROR_REQUESTS=${ERROR_REQUESTS:-0}
        
        MESSAGE=$(cat <<EOF
        $STATUS

        üïí Completed at: $TIMESTAMP
        üì® Total Requests: $TOTAL_REQUESTS
        ‚ùå Failed Requests: $ERROR_REQUESTS
        üîó [View GitHub Run]($RUN_URL)
        üìä Artifacts: .jtl and HTML report
        EOF
        )
        
        # Only send notification if bot token is available
        if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            --data-urlencode "text=$MESSAGE"
        else
          echo "‚ö†Ô∏è Telegram notification skipped: missing bot token or chat ID"
        fi